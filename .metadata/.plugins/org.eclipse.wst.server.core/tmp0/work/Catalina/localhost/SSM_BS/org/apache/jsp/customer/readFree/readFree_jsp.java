/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.42
 * Generated at: 2016-06-01 16:59:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.customer.readFree;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class readFree_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/commons/taglibs.jsp", Long.valueOf(1458966020987L));
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\r\n");
      out.write("<title>免费试读</title>\r\n");
      out.write(" <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\r\n");
      out.write("        <meta name=\"description\" content=\"Moleskine Notebook with jQuery Booklet\" />\r\n");
      out.write("        <meta name=\"keywords\" content=\"jquery, book, flip, pages, moleskine, booklet, plugin, css3 \"/>\r\n");
      out.write("\t\t<link rel=\"shortcut icon\" href=\"../favicon.ico\" type=\"image/x-icon\"/>\r\n");
      out.write("\t\t<script type=\"text/javascript\" src=\"");
      out.print(request.getContextPath());
      out.write("/customer/readFree/booklet/jquery-1.4.4.min.js\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(request.getContextPath());
      out.write("/customer/readFree/booklet/jquery.easing.1.3.js\" type=\"text/javascript\"></script>\r\n");
      out.write("\t\t<script src=\"");
      out.print(request.getContextPath());
      out.write("/customer/readFree/booklet/jquery.booklet.1.1.0.min.js\" type=\"text/javascript\"></script>\r\n");
      out.write("\r\n");
      out.write("\t\t<link href=\"");
      out.print(request.getContextPath());
      out.write("/customer/readFree/booklet/jquery.booklet.1.1.0.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen\" />\r\n");
      out.write("\t\t<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath());
      out.write("/customer/readFree/css/style.css\" type=\"text/css\" media=\"screen\"/>\r\n");
      out.write("</head>\r\n");
      out.write(" <body>\r\n");
      out.write("\t\t<h1  style=\"text-align:center\" class=\"title\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.readfreeBook.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("的免费试读</h1>\r\n");
      out.write("<div class=\"book_wrapper\">\r\n");
      out.write("\t\t\t<a id=\"next_page_button\"></a>\r\n");
      out.write("\t\t\t<a id=\"prev_page_button\"></a>\r\n");
      out.write("\t\t\t<div id=\"loading\" class=\"loading\">Loading pages...</div>\r\n");
      out.write("\t\t\t<div id=\"mybook\" style=\"display:none;\">\r\n");
      out.write("\t\t\t\t<div class=\"b-load\">\r\n");
      out.write("\t\t\t <div>\r\n");
      out.write("\t\t\t\t\t\t<img src='");
      if (_jspx_meth_c_005furl_005f0(_jspx_page_context))
        return;
      out.write("' alt=\"\"/>\r\n");
      out.write("\t\t\t\t\t</div> \r\n");
      out.write("\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t\t<h1>本书简介</h1>\r\n");
      out.write("\t\t\t\t\t\t<p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.readfreeBook.introduce}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</p>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write(" \r\n");
      out.write("\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t<br><br><br><br><br><br><br><br><br><br><br><br>\r\n");
      out.write("\t\t\t\t\t\t<h1>暂无更多试读内容！</h1>\r\n");
      out.write("\t\t\t\t\t\t<h2>IBooK 即将推出在线电子版图书阅读，届时记得关注哦！</h2>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\t\t<!-- <div>\r\n");
      out.write("\t\t\t\t\t\t<img src=\"images/5.jpg\" alt=\"\" style=\"height:200px;\" />\r\n");
      out.write("\t\t\t\t\t\t<h1>ckeditor插件之插入代码和代码高亮插件完美版</h1>\r\n");
      out.write("\t\t\t\t\t\t<p>此款ckeditor插入代码高亮插件支持PHPCMS，其实做这个本来就是针对PHPCMS的ckeditor编辑器来做的。本站用的即是这个插件。</p>\r\n");
      out.write("\t\t\t\t\t</div> -->\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("        <div>\r\n");
      out.write("            <span class=\"reference\">\r\n");
      out.write("            </span>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("        <!-- The JavaScript -->\r\n");
      out.write("\r\n");
      out.write("        <script type=\"text/javascript\">\r\n");
      out.write("\t\t\t$(function() {\r\n");
      out.write("\t\t\t\tvar $mybook \t\t= $('#mybook');\r\n");
      out.write("\t\t\t\tvar $bttn_next\t\t= $('#next_page_button');\r\n");
      out.write("\t\t\t\tvar $bttn_prev\t\t= $('#prev_page_button');\r\n");
      out.write("\t\t\t\tvar $loading\t\t= $('#loading');\r\n");
      out.write("\t\t\t\tvar $mybook_images\t= $mybook.find('img');\r\n");
      out.write("\t\t\t\tvar cnt_images\t\t= $mybook_images.length;\r\n");
      out.write("\t\t\t\tvar loaded\t\t\t= 0;\r\n");
      out.write("\t\t\t\t//preload all the images in the book,\r\n");
      out.write("\t\t\t\t//and then call the booklet plugin\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t$mybook_images.each(function(){\r\n");
      out.write("\t\t\t\t\tvar $img \t= $(this);\r\n");
      out.write("\t\t\t\t\tvar source\t= $img.attr('src');\r\n");
      out.write("\t\t\t\t\t$('<img/>').load(function(){\r\n");
      out.write("\t\t\t\t\t\t++loaded;\r\n");
      out.write("\t\t\t\t\t\tif(loaded == cnt_images){\r\n");
      out.write("\t\t\t\t\t\t\t$loading.hide();\r\n");
      out.write("\t\t\t\t\t\t\t$bttn_next.show();\r\n");
      out.write("\t\t\t\t\t\t\t$bttn_prev.show();\r\n");
      out.write("\t\t\t\t\t\t\t$mybook.show().booklet({\r\n");
      out.write("\t\t\t\t\t\t\t\tname:               null,                            // name of the booklet to display in the document title bar\r\n");
      out.write("\t\t\t\t\t\t\t\twidth:              800,                             // container width\r\n");
      out.write("\t\t\t\t\t\t\t\theight:             500,                             // container height\r\n");
      out.write("\t\t\t\t\t\t\t\tspeed:              600,                             // speed of the transition between pages\r\n");
      out.write("\t\t\t\t\t\t\t\tdirection:          'LTR',                           // direction of the overall content organization, default LTR, left to right, can be RTL for languages which read right to left\r\n");
      out.write("\t\t\t\t\t\t\t\tstartingPage:       0,                               // index of the first page to be displayed\r\n");
      out.write("\t\t\t\t\t\t\t\teasing:             'easeInOutQuad',                 // easing method for complete transition\r\n");
      out.write("\t\t\t\t\t\t\t\teaseIn:             'easeInQuad',                    // easing method for first half of transition\r\n");
      out.write("\t\t\t\t\t\t\t\teaseOut:            'easeOutQuad',                   // easing method for second half of transition\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tclosed:             true,                           // start with the book \"closed\", will add empty pages to beginning and end of book\r\n");
      out.write("\t\t\t\t\t\t\t\tclosedFrontTitle:   null,                            // used with \"closed\", \"menu\" and \"pageSelector\", determines title of blank starting page\r\n");
      out.write("\t\t\t\t\t\t\t\tclosedFrontChapter: null,                            // used with \"closed\", \"menu\" and \"chapterSelector\", determines chapter name of blank starting page\r\n");
      out.write("\t\t\t\t\t\t\t\tclosedBackTitle:    null,                            // used with \"closed\", \"menu\" and \"pageSelector\", determines chapter name of blank ending page\r\n");
      out.write("\t\t\t\t\t\t\t\tclosedBackChapter:  null,                            // used with \"closed\", \"menu\" and \"chapterSelector\", determines chapter name of blank ending page\r\n");
      out.write("\t\t\t\t\t\t\t\tcovers:             false,                           // used with  \"closed\", makes first and last pages into covers, without page numbers (if enabled)\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tpagePadding:        10,                              // padding for each page wrapper\r\n");
      out.write("\t\t\t\t\t\t\t\tpageNumbers:        true,                            // display page numbers on each page\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\thovers:             false,                            // enables preview pageturn hover animation, shows a small preview of previous or next page on hover\r\n");
      out.write("\t\t\t\t\t\t\t\toverlays:           false,                            // enables navigation using a page sized overlay, when enabled links inside the content will not be clickable\r\n");
      out.write("\t\t\t\t\t\t\t\ttabs:               false,                           // adds tabs along the top of the pages\r\n");
      out.write("\t\t\t\t\t\t\t\ttabWidth:           60,                              // set the width of the tabs\r\n");
      out.write("\t\t\t\t\t\t\t\ttabHeight:          20,                              // set the height of the tabs\r\n");
      out.write("\t\t\t\t\t\t\t\tarrows:             false,                           // adds arrows overlayed over the book edges\r\n");
      out.write("\t\t\t\t\t\t\t\tcursor:             'pointer',                       // cursor css setting for side bar areas\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\thash:               false,                           // enables navigation using a hash string, ex: #/page/1 for page 1, will affect all booklets with 'hash' enabled\r\n");
      out.write("\t\t\t\t\t\t\t\tkeyboard:           true,                            // enables navigation with arrow keys (left: previous, right: next)\r\n");
      out.write("\t\t\t\t\t\t\t\tnext:               $bttn_next,          \t\t\t// selector for element to use as click trigger for next page\r\n");
      out.write("\t\t\t\t\t\t\t\tprev:               $bttn_prev,          \t\t\t// selector for element to use as click trigger for previous page\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tmenu:               null,                            // selector for element to use as the menu area, required for 'pageSelector'\r\n");
      out.write("\t\t\t\t\t\t\t\tpageSelector:       false,                           // enables navigation with a dropdown menu of pages, requires 'menu'\r\n");
      out.write("\t\t\t\t\t\t\t\tchapterSelector:    false,                           // enables navigation with a dropdown menu of chapters, determined by the \"rel\" attribute, requires 'menu'\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tshadows:            true,                            // display shadows on page animations\r\n");
      out.write("\t\t\t\t\t\t\t\tshadowTopFwdWidth:  166,                             // shadow width for top forward anim\r\n");
      out.write("\t\t\t\t\t\t\t\tshadowTopBackWidth: 166,                             // shadow width for top back anim\r\n");
      out.write("\t\t\t\t\t\t\t\tshadowBtmWidth:     50,                              // shadow width for bottom shadow\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tbefore:             function(){},                    // callback invoked before each page turn animation\r\n");
      out.write("\t\t\t\t\t\t\t\tafter:              function(){}                     // callback invoked after each page turn animation\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\tCufon.refresh();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}).attr('src',source);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t});\r\n");
      out.write("        </script>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fset_005f0.setParent(null);
    // /commons/taglibs.jsp(5,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f0.setVar("ctx");
    // /commons/taglibs.jsp(5,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/commons/taglibs.jsp(5,0) '${pageContext.request.contextPath}'",_el_expressionfactory.createValueExpression(_jspx_page_context.getELContext(),"${pageContext.request.contextPath}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
    int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
    if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005furl_005f0.setParent(null);
    // /customer/readFree/readFree.jsp(29,16) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f0.setValue((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("/upload/${sessionScope.firstPage}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
    int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
    if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fforEach_005f0.setParent(null);
    // /customer/readFree/readFree.jsp(35,5) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setVar("readFree");
    // /customer/readFree/readFree.jsp(35,5) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/customer/readFree/readFree.jsp(35,5) '${sessionScope.readfreeList}'",_el_expressionfactory.createValueExpression(_jspx_page_context.getELContext(),"${sessionScope.readfreeList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
    // /customer/readFree/readFree.jsp(35,5) name = varStatus type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setVarStatus("status");
    int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
    try {
      int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
      if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write(" \r\n");
          out.write("\t\t\t\t\t<div>\r\n");
          out.write("\t\t\t\t\t\t<img src='");
          if (_jspx_meth_c_005furl_005f1(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
            return true;
          out.write("' alt=\"\"/>\r\n");
          out.write("\t\t\t\t\t</div>\r\n");
          out.write("\t\t\t\t\t");
          int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
    } finally {
      _jspx_th_c_005fforEach_005f0.doFinally();
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
    }
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f1 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    _jspx_th_c_005furl_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005furl_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
    // /customer/readFree/readFree.jsp(37,16) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f1.setValue((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("/upload/${readFree.src}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
    int _jspx_eval_c_005furl_005f1 = _jspx_th_c_005furl_005f1.doStartTag();
    if (_jspx_th_c_005furl_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f1);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f1);
    return false;
  }
}
