package com.cn.hnust.controller;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.cn.hnust.pojo.Book;
import com.cn.hnust.pojo.MonthMoney;
import com.cn.hnust.pojo.Order;
import com.cn.hnust.pojo.OrderDetial;
import com.cn.hnust.pojo.Subtype;
import com.cn.hnust.pojo.TopSubtype;
import com.cn.hnust.pojo.Type;
import com.cn.hnust.service.BookService;
import com.cn.hnust.service.OrderDetialService;
import com.cn.hnust.service.OrderService;
import com.cn.hnust.service.SubTypeService;
import com.cn.hnust.service.TypeService;

@Controller
@RequestMapping("/main")
public class mainController {
	@Resource
	private OrderService orderService;
	@Resource
	private BookService bookService;
	@Resource
	private TypeService typeService;
	@Resource
	private SubTypeService subTypeService;
	@Resource
	private OrderDetialService orderDetialService;


	@RequestMapping("/count")
	public String Count(HttpServletRequest request, Model model,
			String dateParam) throws ParseException {
		System.out.println("dateParam" + dateParam);
		// 如果date 为空查询当前月
		if (dateParam == null || dateParam == "") {
			Date date = new Date();
			DateFormat format = new SimpleDateFormat("yyyy-MM");
			dateParam = format.format(date);
		}
		// 查询当月交易
		List<Order> list = new ArrayList<Order>();
		List<MonthMoney> moneyList = new ArrayList<MonthMoney>();
		list = orderService.findByMonth(dateParam + "%");
		double allMoney = 0;
		//System.out.println(list.size());
		for (int i = 1; i <= 31; i++) {
			MonthMoney monthMoney = new MonthMoney();
			double daycount = 0;
			for (int m = 0; m < list.size(); m++) {
				String day = list.get(m).getOrderdate().substring(8, 10);
				if (i == Integer.parseInt(day)) {
					daycount += list.get(m).getTotalmoney();
				}
			}
			monthMoney.setDay(i);
			monthMoney.setMoney(daycount);
			moneyList.add(monthMoney);
			allMoney += daycount;
		}
		model.addAttribute("moneyList", moneyList);
		model.addAttribute("allOrder", list.size());
		model.addAttribute("allMoney", allMoney);
		//查询本月共销售图书量
		int allBook=0;
		for (Order orderlist : list) {
			List<OrderDetial> detialList=new ArrayList<OrderDetial>();
			Map<String,Object> condition=new HashMap();
			condition.put("orderid", orderlist.getOrderid());
			detialList=orderDetialService.getOrderDetialNoPage(condition);
			for (OrderDetial orderDetial : detialList){
				allBook+=orderDetial.getQuantity();
			}
		}
		// 查询图书销量排行
		List<Book> bookList = new ArrayList<Book>();
		List<Book> bookTopTen = new ArrayList<Book>();
		bookList = bookService.getBySaled();
		int number;
		if (bookList.size() > 15) {
			number = 15;
		} else {
			number = bookList.size();
		}
		for (int i = 0; i < number; i++) {
			bookTopTen.add(bookList.get(i));
		}
		model.addAttribute("bookTopTen", bookTopTen);

		
		
		// 查询细类排行
		int top10;
		List<Subtype> subtypeList = subTypeService.selectAll();
		System.out.println(subtypeList.size());
		List<TopSubtype> top = new ArrayList<TopSubtype>();
		for (Subtype subtype : subtypeList) {
			TopSubtype topentity = new TopSubtype();
			int total = 0;
			for (int i = 0; i < bookList.size(); i++) {
				if (bookList.get(i).getSubtype() == subtype.getId()) {
					total += bookList.get(i).getSaled();
				}
			}
			topentity.setId(subtype.getId());
			topentity.setSubName(subtype.getSubtypedescn());
			topentity.setTotalNumber(total);
			top.add(topentity);
		}
		
		
		
		// 对细类排序
		int[] m = new int[top.size()];
		for (int x = 0; x < top.size(); x++) {
			m[x] = top.get(x).getTotalNumber();
		}
		for (int i = 0; i < m.length; i++) {
			for (int j = i + 1; j < m.length; j++) {
				if (m[i] < m[j]) {
					int linshi = m[i];
					m[i] = m[j];
					m[j] = linshi;
				}
			}
		}
		if (top.size() > 6) {
			top10 = 6;
		} else {
			top10 = top.size();
		}
		List<TopSubtype> top1 = new ArrayList<TopSubtype>();
		for (int i = 0; i < top10; i++) {
			for (TopSubtype topSubtype : top) {
				if (m[i] == topSubtype.getTotalNumber()) {
					top1.add(topSubtype);
				}
			}
		}
		// 返回排行前10的细类统计
		model.addAttribute("topList", top1);
		
		
		
		// 查询大类统计
		List<Type> typeList = typeService.selectAll();
		List<TopSubtype> typeCount = new ArrayList<TopSubtype>();
		for (Type type : typeList) {
			TopSubtype topentity = new TopSubtype();
			int total = 0;
			for (int i = 0; i < bookList.size(); i++) {
				if (bookList.get(i).getType()-type.getTypenumber()==0) {
					total += bookList.get(i).getSaled();
				}
			}
			topentity.setId(type.getTypenumber());
			topentity.setSubName(type.getTypedescn());
			topentity.setTotalNumber(total);
			typeCount.add(topentity);
		}
		model.addAttribute("typeCount", typeCount);
		
		return "/main/count";
	}

}
