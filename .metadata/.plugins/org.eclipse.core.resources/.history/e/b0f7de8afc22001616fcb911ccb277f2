package com.cn.hnust.controller;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.cn.hnust.pojo.Assess;
import com.cn.hnust.pojo.Customer;
import com.cn.hnust.pojo.Order;
import com.cn.hnust.pojo.OrderDetial;
import com.cn.hnust.pojo.Page;
import com.cn.hnust.pojo.ShopCar;
import com.cn.hnust.service.AssessService;
import com.cn.hnust.service.OrderDetialService;
import com.cn.hnust.service.OrderService;
import com.cn.hnust.service.ShopCarService;

@Controller
@RequestMapping("/order")
public class OrderController {
	@Resource
	private OrderService orderService;
	@Resource
	private OrderDetialService orderDetialService;
	@Resource
	private AssessService assessService;
	@Resource
	private ShopCarService shopCarService;
	
	
	@RequestMapping("/getOrderByPage")
	public String getOrderByPage(HttpServletRequest request, Model model,
			Order order, HttpSession session) {
		List<Order> orderList = new ArrayList<Order>();
		List<Order> orderList1 = new ArrayList<Order>();
		int counts;// 分页记录总数
		String pageNow = request.getParameter("pageNow");
		String countString=request.getParameter("allcount");
		Page page = null;
		// 判断分页参数
		Order orderParams = (Order) session.getAttribute("orderParams");
		if (countString != null) {
			counts = Integer.parseInt(countString);
			order=orderParams;
		} else {
			counts = orderService.getCounts(order);
			
		}
		 // 添加查询条件
		Map<String, Object> condition = new HashMap<String, Object>();
		condition.put("id", order.getId());
		condition.put("customerid", order.getCustomerid());
		condition.put("orderid", order.getOrderid());
		condition.put("orderdate", order.getOrderdate());
		condition.put("phone", order.getPhone());
		condition.put("status", order.getStatus());
		if (pageNow != null && pageNow != "") {
			page = new Page(counts, Integer.parseInt(pageNow));
		} else {
			page = new Page(counts, 1);
		}
		condition.put("startPos", page.getStartPos());
		condition.put("pageSize", page.getPageSize());
		orderList = this.orderService.getOrderByPage(condition);
		orderList1=this.orderService.getOrderNoPage(condition);
		model.addAttribute("orderList", orderList);
		model.addAttribute("page", page);
		model.addAttribute("orderParams", order);
		session.setAttribute("orderParams", order);
		model.addAttribute("url", "/order/getOrderByPage");
		//查询显示订单情况
		int orderTotal=0;
		int ordersuccess=0;
		double ordermoney=0;
		
		for (Order order2 : orderList1) {
			if(order2.getStatus()==0){
				ordersuccess++;
				ordermoney+=order2.getTotalmoney();
			}
			orderTotal++;
		}
		model.addAttribute("orderTotal", orderTotal);
		model.addAttribute("ordersuccess", ordersuccess);
		model.addAttribute("ordermoney", ordermoney);
		return "order/orderList";
	}
	@RequestMapping("/orderDetial")
	public String orderDetial(HttpServletRequest request, Model model,
			HttpSession session) {
		String  orderid = request.getParameter("orderid");
		List<Order> orderList=new ArrayList<Order>();
		List<OrderDetial> orderDetialList=new ArrayList<OrderDetial>();
		Map<String, Object> condition = new HashMap<String, Object>();
		condition.put("orderid", orderid);
		orderList=orderService.getOrderNoPage(condition);
		//detial 查询条件
		Map<String, Object> detialCondition = new HashMap<String, Object>();
		detialCondition.put("orderid", orderid);
		orderDetialList=orderDetialService.getOrderDetialNoPage(condition);
        //传值到页面
		Order order=orderList.get(0);
		model.addAttribute("order", order);
		model.addAttribute("orderDetialList", orderDetialList);
		return "order/orderDetial";
	}
	@RequestMapping("/orderDetial1")
	public String orderDetial1(HttpServletRequest request, Model model,
			HttpSession session) {
		String  orderid = request.getParameter("orderid");
		List<Order> orderList=new ArrayList<Order>();
		List<OrderDetial> orderDetialList=new ArrayList<OrderDetial>();
		Map<String, Object> condition = new HashMap<String, Object>();
		condition.put("orderid", orderid);
		orderList=orderService.getOrderNoPage(condition);
		//detial 查询条件
		Map<String, Object> detialCondition = new HashMap<String, Object>();
		detialCondition.put("orderid", orderid);
		orderDetialList=orderDetialService.getOrderDetialNoPage(condition);
        //传值到页面
		Order order=orderList.get(0);
		model.addAttribute("order", order);
		model.addAttribute("orderDetialList", orderDetialList);
		return "customer/orderDetial";
	}
	@RequestMapping("/orderAssess")
	public String orderAssess(HttpServletRequest request, Model model,
			HttpSession session) {
		String  orderid = request.getParameter("orderid");
		List<Order> orderList=new ArrayList<Order>();
		List<OrderDetial> orderDetialList=new ArrayList<OrderDetial>();
		Map<String, Object> condition = new HashMap<String, Object>();
		condition.put("orderid", orderid);
		orderList=orderService.getOrderNoPage(condition);
		//detial 查询条件
		Map<String, Object> detialCondition = new HashMap<String, Object>();
		detialCondition.put("orderid", orderid);
		orderDetialList=orderDetialService.getOrderDetialNoPage(condition);
        //传值到页面
		Order order=orderList.get(0);
		model.addAttribute("order", order);
		model.addAttribute("orderDetialList", orderDetialList);
		return "customer/orderAssess";
	}
	@RequestMapping("/submitAssess")
	public String submitAssess(HttpServletRequest request, Model model,
			HttpSession session,Assess assess,String orderid) throws ParseException {
		 Customer cus=(Customer) session.getAttribute("loginCustomer");
		Map<String, Object> detialCondition = new HashMap<String, Object>();
		detialCondition.put("orderid", orderid);
		List<OrderDetial> orderDetialList=orderDetialService.getOrderDetialNoPage(detialCondition);
		Date date=new Date();
		DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date time=dateFormat.parse(dateFormat.format(date));
		for (OrderDetial orderDetial : orderDetialList) {
			assess.setBookid(orderDetial.getBookid());
			assess.setUser(cus.getLoginname());
			assess.setDate(time);
			assessService.insert(assess);
		}
		return "redirect:/customer/myOrder";
	}
	@RequestMapping("/orderUpdate")
	public String orderUpdate(HttpServletRequest request, Model model,
			Order order) {
		int  id = Integer.parseInt(request.getParameter("id"));
		int   status =Integer.parseInt(request.getParameter("status"));
		order.setId(id);
		order.setStatus(status);
		int xx=orderService.updateByPrimaryKeySelective(order);
		System.out.println(xx);
		return "redirect:/order/getOrderByPage";
	}
	@RequestMapping("/orderUpdate1")
	public String orderUpdate1(HttpServletRequest request, Model model,
			Order order) {
		int  id = Integer.parseInt(request.getParameter("id"));
		int   status =Integer.parseInt(request.getParameter("status"));
		order.setId(id);
		order.setStatus(status);
		int xx=orderService.updateByPrimaryKeySelective(order);
		return "redirect:/customer/myOrder";
	}
	@RequestMapping("/orderSave")
	public String orderSave(HttpServletRequest request, Model model,
			Order order,String ssx,HttpSession session) throws ParseException {
		//获取session 顾客信息
		Customer cus=(Customer) session.getAttribute("loginCustomer");
		//获取购物车商品详情
		List<OrderDetial>orderDetialList= (List<OrderDetial>) session.getAttribute("orderDetialList");
		session.removeAttribute("orderDetialList");
		Date date=new Date();
		DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		DateFormat orderFormat=new SimpleDateFormat("yyyyMMddHHmmss");
		String time=dateFormat.format(date);
		String orderid=orderFormat.format(date);
		//完善订单信息
		String s=ssx+order.getAddress();
		order.setAddress(s);
		order.setOrderid(orderid);
		order.setCustomerid(cus.getId());
		order.setOrderdate(time);
		order.setStatus(1);
		int xx=orderService.insert(order);
		String type="";
		 type=(String)session.getAttribute("type");
			if(type.equals("buy")){
				
			}else{
				if(xx>0){
					for (OrderDetial orderDetial : orderDetialList) {
						orderDetial.setOrderid(order.getOrderid());
						orderDetialService.insert(orderDetial);
						shopCarService.deleteById(orderDetial.getId());
					}
				}
				List<ShopCar> shopCarList=shopCarService.selectByCusId(cus.getId());
				session.setAttribute("shopCarCount", shopCarList.size());
			}
		return "redirect:/customer/myOrder";
	}
	@RequestMapping("/orderdelete")
	public String orderdelete(HttpServletRequest request, Model model,
			Order order,HttpSession session,int id) throws ParseException {
		int xx=orderService.delete(id);
		return "redirect:/customer/myOrder";
	}

}
